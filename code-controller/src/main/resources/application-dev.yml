######################## common config : ########################
server:
  port: 8848
  tomcat:
    uri-encoding: UTF-8
  servlet:
    context-path: /code # 访问前缀

######################## spring config : ########################
spring:
  banner:
    location: classpath:banner.txt # banner 文本文件路径
    # banner 图像文件路径（可以选择 png,jpg,gif 文件）
    #image:
    #  location: classpath:banner.gif
    charset: UTF-8 # banner 文件编码
  main:
    # banner 模式。有三种模式：console/log/off
    # console 打印到控制台（通过 System.out）
    # log - 打印到日志中
    # off - 关闭打印
    banner-mode: console # 是否开启启动图（默认console）
  output:
    ansi:
      enabled: detect # 检查终端是否支持ANSI，是的话就采用彩色输出


  ######################## thymeleaf config : ########################
  thymeleaf:
    prefix: classpath:/templates/ # 模板路径，默认templates，可不配置
    check-template-location: true
    cache: false #开发配置false，避免修改模板需要重启服务器
    suffix: .html
    encoding: UTF-8 #编码，可不配置
    mode: HTML #模板的模式，支持HTML,XML,TEXT,JavaScript
    servlet:
      content-type: text/html # 内容类别，可不配置

  ######################## jdbc config : ########################
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ENC(Z05578yfcqy8qG1DLBMYQaN1TJZJrkcNK1H8LGlXLAjTvkk2lJ7+hxgPjMlris1Ynl2p6RCfRoDJH2djvd+G3rLwGX+IhGsqMMcQ0UwsWSZ5KBTHQq337QHF9PLonRUXvlsB+PCOlQ4kzPMhQz/5I3e34a9UUswwxo0Cw7xHz7N7aZ62dkcwfvmDcJAzDjE4uI8TaeyU7w4dInrQHP9UJVyPjTqWkHktPpZ15DozeTnHA/3P1R2E/QvhXWzBnRSf)
    username: ENC(/jtmzRPay3mDGtfXVLpzzF/fyQZglXPzWIQg5S9C9R2mWFE80CQ+r7h2iwmcfH5Z)
    password: ENC(E1hEl4gLi4GrO4DD7XSpTTuPGzvm3pG5INGqRZ7F80LoPE/UCx416On5bs1yyttf)
    #    platform: mysql
    #    separator: ; # sql脚本中语句分隔符
    #    sql-script-encoding: utf-8 # sql文件的编码
    #    schema: classpath:schema.sql # 表初始化语句
    #    data: classpath:data.sql # 数据初始化
    #    initialization-mode: always # 初始化模式（springboot2.0），其中有三个值，always为始终执行初始化，embedded只初始化内存数据库（默认值）,如h2等，never为不执行初始化。
    #    continue-on-error: false # 遇到语句错误时是否继续，若已经执行过某些语句，再执行可能会报错，可以忽略，不会影响程序启动
    # Hikari will use the above plus the following to setup connection pooling
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      minimum-idle: 5 # 最小连接池数量。如果空闲连接低于此值并且连接池中的总连接数少于此值maximumPoolSize，则HikariCP将尽最大努力快速高效地添加其他连接。但是，为了获得最佳性能和响应尖峰需求，我们建议不要设置此值，而是允许HikariCP充当固定大小的连接池。默认值：与maximumPoolSize相同
      maximum-pool-size: 15 # 池允许达到的最大大小，包括空闲和正在使用的连接。基本上这个值将决定到数据库后端的最大实际连接数。对此的合理价值最好由您的执行环境决定。当池达到此大小并且没有空闲连接可用时，对getConnection（）的调用将connectionTimeout在超时前阻塞达几毫秒。请阅读关于游泳池尺寸。 默认值：10
      auto-commit: true # 此属性控制从池返回的连接的默认自动提交行为。它是一个布尔值。 默认值：true
      idle-timeout: 30000 # 允许连接在池中闲置的最长时间。 此设置仅适用于minimumIdle定义为小于maximumPoolSize。一旦池达到连接，空闲连接将不会退出minimumIdle。连接是否因闲置而退出，最大变化量为+30秒，平均变化量为+15秒。在超时之前，连接永远不会退出。值为0意味着空闲连接永远不会从池中删除。允许的最小值是10000ms（10秒）。 默认值：600000（10分钟）
      connection-timeout: 3000 # 此属性控制客户端（即您）将等待来自池的连接的最大毫秒数。如果在没有可用连接的情况下超过此时间，则会抛出SQLException。最低可接受的连接超时时间为250 ms。默认值：30000（30秒）
      max-lifetime: 600000 # 池中连接的最大生存期。正在使用的连接永远不会退休，只有在关闭后才会被删除。在逐个连接的基础上，应用较小的负面衰减来避免池中的大量消失。 我们强烈建议设置此值，并且应该比任何数据库或基础设施规定的连接时间限制短几秒。 值为0表示没有最大寿命（无限寿命），当然是idleTimeout设定的主题。 默认值：1800000（30分钟）

  ######################## jackson config : ########################
  jackson:
    # 设置属性命名策略,对应jackson下PropertyNamingStrategy中的常量值，SNAKE_CASE-返回的json驼峰式转下划线，json body下划线传到后端自动转驼峰式
    property-naming-strategy: SNAKE_CASE
    # 全局设置@JsonFormat的格式pattern
    date-format: yyyy-MM-dd HH:mm:ss
    # 当地时区
    locale: zh
    # 设置全局时区
    time-zone: GMT+8
    # 常用，全局设置pojo或被@JsonInclude注解的属性的序列化方式
    default-property-inclusion: NON_NULL #不为空的属性才会序列化,具体属性可看JsonInclude.Include
    # 常规默认,枚举类SerializationFeature中的枚举属性为key，值为boolean设置jackson序列化特性,具体key请看SerializationFeature源码
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: true # 返回的java.util.date转换成timestamp
      FAIL_ON_EMPTY_BEANS: true # 对象为空时是否报错，默认true
    # 枚举类DeserializationFeature中的枚举属性为key，值为boolean设置jackson反序列化特性,具体key请看DeserializationFeature源码
    deserialization:
      # 常用,json中含pojo不存在属性时是否失败报错,默认true
      FAIL_ON_UNKNOWN_PROPERTIES: false
    # 枚举类MapperFeature中的枚举属性为key，值为boolean设置jackson ObjectMapper特性
    # ObjectMapper在jackson中负责json的读写、json与pojo的互转、json tree的互转,具体特性请看MapperFeature,常规默认即可
    mapper:
      # 使用getter取代setter探测属性，如类中含getName()但不包含name属性与setName()，传输的vo json格式模板中依旧含name属性
      USE_GETTERS_AS_SETTERS: true #默认false
    # 枚举类JsonParser.Feature枚举类中的枚举属性为key，值为boolean设置jackson JsonParser特性
    # JsonParser在jackson中负责json内容的读取,具体特性请看JsonParser.Feature，一般无需设置默认即可
    parser:
      ALLOW_SINGLE_QUOTES: true # 是否允许出现单引号,默认false
    # 枚举类JsonGenerator.Feature枚举类中的枚举属性为key，值为boolean设置jackson JsonGenerator特性，一般无需设置默认即可
    # JsonGenerator在jackson中负责编写json内容,具体特性请看JsonGenerator.Feature

######################## mybatis-plus config : ########################
mybatis-plus:
  type-aliases-package: cn.code.springbootmybatisplus.entity
  mapper-locations: classpath:mapper/*Mapper.xml
  # mybatis 的原生配置
  configuration:
    cache-enabled: false # 是否开启缓存
    map-underscore-to-camel-case: true # 是否开启自动驼峰命名规则（camel case）映射
    call-setters-on-nulls: true # MyBatis 在使用 resultMap 来映射查询结果中的列，如果查询结果中包含空值的列
    jdbc-type-for-null: 'null' # 如果type为空
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
  # MyBatis-Plus 全局策略配置
  global-config:
    banner: false # 是否显示mybatis-plus的图标
    db-config:
      id-type: input # 全局默认主键类型，AUTO:"数据库ID自增", INPUT:"用户输入ID", ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID"
      logic-delete-field: deleted  #全局逻辑删除字段值 3.3.0开始支持，详情看下面。
      logic-delete-value: true # 逻辑已删除值(默认为 1)
      logic-not-delete-value: false # 逻辑未删除值(默认为 0)

######################## page-helper config : ########################
pagehelper:
  reasonable: false # 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据
  support-methods-arguments: true
  params: count=countSql
  row-bounds-with-count: true
  helper-dialect: mysql

######################## oss config : ########################
aliyun:
  oss:
    endpoint: ENC(xyd8h5LA2IccNBN8CaLiSWKB9qrxbnn2LYuh2So+M5jko7Lt1ZMuq6uJ8D51SUixOQEh9g+wu3AxUYLMzE7YiEehavpqDH8sEKRVyJEzr+8=) # 阿里云内网或者外网的访问地址
    access-key-id: ENC(A4qWydnhjzg4pNWGwQAoXj1hguNijhoYy+B390cjCmHIe2er2oquxiCEOogSWHoP8zAhyjEm3djwn7bulD+O2A==) # 访问身份验证中用到用户标识
    access-key-secret: ENC(MgHtk36zIKXpr7M1bYUlWF8gmvILMXK8eIMCDC94enYQSfnOWRSw0bpJ5rkwRkd0l91+um0dVGPksAPnSMGi2g==) # 用户用于加密签名字符串和oss用来验证签名字符串的密钥
    bucket-name: ENC(X7aqlneQsRLZOH3cs44S00yFkxRxtEZ6ykVyCjt5rFHVyinSrwIu8g8W34df+1mE) # oss的存储空间
    url-prefix: ENC(0+MJRcz9bK16nmS8uQ0JgPWtg1gYB2qL+hUDVbo5q6miczG0YrjFOLcsC7tJzw+ssY4o0DTrJBGEQHT/cuQUCQlnnMM/iymKk2yHCQy3vLM=)
    callback: ENC(http://localhost:8080/aliyun/oss/callback) # 文件上传成功后的回调地址

######################## jasypt config : ########################
jasypt:
  encryptor:
    # 自定义盐
    password: EncryptSalt
    # 自定义包裹密文字符串
    property:
      prefix: ENC(
      suffix: )

######################## log config : ########################
logging:
  level:
    root: info
    org.springframework.boot.autoconfigure: error
    cn.code.springbootmybatisplus.mapper: debug

