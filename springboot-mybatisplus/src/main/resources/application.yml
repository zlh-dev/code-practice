######################## common config : ########################
server:
  port: 8081
  tomcat:
    uri-encoding: UTF-8
  servlet:
    context-path: /springboot-mybatisplus # 访问前缀

######################## spring config : ########################
spring:
  banner:
    location: classpath:banner.txt # banner 文本文件路径
    # banner 图像文件路径（可以选择 png,jpg,gif 文件）
    #image:
    #  location: classpath:banner.gif
    charset: UTF-8 # banner 文件编码
  main:
    # banner 模式。有三种模式：console/log/off
    # console 打印到控制台（通过 System.out）
    # log - 打印到日志中
    # off - 关闭打印
    banner-mode: console # 是否开启启动图（默认console）
  output:
    ansi:
      enabled: detect # 检查终端是否支持ANSI，是的话就采用彩色输出

  ######################## jdbc config : ########################
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/administrative_divisions?useUnicode=true&characterEncoding=utf8&useSSL=true&serverTimezone=UTC
    username: root
    password: root
    platform: mysql
    separator: ; # sql脚本中语句分隔符
    sql-script-encoding: utf-8 # sql文件的编码
    schema: classpath:schema.sql # 表初始化语句
    data: classpath:data.sql # 数据初始化
    initialization-mode: always # 初始化模式（springboot2.0），其中有三个值，always为始终执行初始化，embedded只初始化内存数据库（默认值）,如h2等，never为不执行初始化。
    continue-on-error: false # 遇到语句错误时是否继续，若已经执行过某些语句，再执行可能会报错，可以忽略，不会影响程序启动
    # Hikari will use the above plus the following to setup connection pooling
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      minimum-idle: 5 # 最小连接池数量。如果空闲连接低于此值并且连接池中的总连接数少于此值maximumPoolSize，则HikariCP将尽最大努力快速高效地添加其他连接。但是，为了获得最佳性能和响应尖峰需求，我们建议不要设置此值，而是允许HikariCP充当固定大小的连接池。默认值：与maximumPoolSize相同
      maximum-pool-size: 15 # 池允许达到的最大大小，包括空闲和正在使用的连接。基本上这个值将决定到数据库后端的最大实际连接数。对此的合理价值最好由您的执行环境决定。当池达到此大小并且没有空闲连接可用时，对getConnection（）的调用将connectionTimeout在超时前阻塞达几毫秒。请阅读关于游泳池尺寸。 默认值：10
      auto-commit: true # 此属性控制从池返回的连接的默认自动提交行为。它是一个布尔值。 默认值：true
      idle-timeout: 30000 # 允许连接在池中闲置的最长时间。 此设置仅适用于minimumIdle定义为小于maximumPoolSize。一旦池达到连接，空闲连接将不会退出minimumIdle。连接是否因闲置而退出，最大变化量为+30秒，平均变化量为+15秒。在超时之前，连接永远不会退出。值为0意味着空闲连接永远不会从池中删除。允许的最小值是10000ms（10秒）。 默认值：600000（10分钟）
      connection-timeout: 3000 # 此属性控制客户端（即您）将等待来自池的连接的最大毫秒数。如果在没有可用连接的情况下超过此时间，则会抛出SQLException。最低可接受的连接超时时间为250 ms。默认值：30000（30秒）
      max-lifetime: 600000 # 池中连接的最大生存期。正在使用的连接永远不会退休，只有在关闭后才会被删除。在逐个连接的基础上，应用较小的负面衰减来避免池中的大量消失。 我们强烈建议设置此值，并且应该比任何数据库或基础设施规定的连接时间限制短几秒。 值为0表示没有最大寿命（无限寿命），当然是idleTimeout设定的主题。 默认值：1800000（30分钟）

######################## mybatis-plus config : ########################
mybatis-plus:
  type-aliases-package: cn.code.springbootmybatisplus.entity
  mapper-locations: classpath:mapper/*Mapper.xml
  # mybatis 的原生配置
  configuration:
    cache-enabled: false # 是否开启缓存
    map-underscore-to-camel-case: true # 是否开启自动驼峰命名规则（camel case）映射
    call-setters-on-nulls: true # MyBatis 在使用 resultMap 来映射查询结果中的列，如果查询结果中包含空值的列
    jdbc-type-for-null: 'null' # 如果type为空
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
  # MyBatis-Plus 全局策略配置
  global-config:
    banner: false # 是否显示mybatis-plus的图标
    db-config:
      id-type: auto # 全局默认主键类型，AUTO:"数据库ID自增", INPUT:"用户输入ID", ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID"

######################## log config : ########################
logging:
  level:
    root: info
    org.springframework.boot.autoconfigure: error
    cn.code.springbootmybatisplus.mapper: debug